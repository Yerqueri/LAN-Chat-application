// Requirements
var os = require('os');
var net = require('net');
var ipconfig = require('Ipconfig.js');
var dgram = require('dgram');

var ifaces = os.networkInterfaces();

// Ip address of the local device.
HOST = ipconfig.myIpAddress().toString();
HOSTUDP = '224.0.0.14';
UDPPORT = 21190;
AVAILPORT = 21200;
MESSAGINGPORT = 18160;

var listOfDevices = [];

var udpClient = dgram.createSocket('udp4');
var udpServer = dgram.createSocket('udp4');

exports.startAttendaceServer = function(UserName) {
    udpServer.on("message", function (msg, rinfo) {
        var tcpConnectionClient = net.connect({port: AVAILPORT,host: rinfo.address},
            function() {
                tcpConnectionClient.write(UserName);
            });
        });

        udpServer.bind(UDPPORT,function(){
            udpServer.addMembership(HOSTUDP,HOST);
            udpServer.setBroadcast(HOSTUDP,HOST);
        });

        net.createServer(function(sock){
            sock.on('data', function(data){
                if(sock.remoteAddress != HOST)
                {
                    var userData = '{"Name":"'+data.toString()+'","IpAddress":"'+ sock.remoteAddress.toString() +'"}';
                    listOfDevices.push(userData);
                }
            });
        }).listen(AVAILPORT, HOST);
}

var listt = [];

exports.getListOfDevices = function(UserName) {
    listOfDevices = [];
    message = new Buffer(UserName);
    udpClient.send(message, 0, message.length, UDPPORT, HOSTUDP, function(err, bytes){});
    setTimeout(function(){
    listt = listOfDevices.filter(function(elem, pos) {
        return listOfDevices.indexOf(elem) == pos;
    });
},5000);
    return listt;
}
